Option Explicit

Public Sub INT_ImportCSV_ToDATA_All()
    Dim fd As FileDialog, filePath As String
    Dim wsDATA As Worksheet, wsCONC As Worksheet
    Dim wbTemp As Workbook, wsTemp As Worksheet
    Dim lastRow As Long, i As Long
    Dim s As String, token As String, t10 As String
    Dim d As Date, y As Long, m As Long, dd As Long
    Dim ok As Boolean, p() As String, pos As Long
    Dim todayDate As Date: todayDate = Date

    On Error GoTo ErrHandler
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    ' Sheets
    On Error Resume Next
    Set wsDATA = ThisWorkbook.Sheets("DATA")
    Set wsCONC = ThisWorkbook.Sheets("CONCILIACIÓN")
    If wsCONC Is Nothing Then Set wsCONC = ThisWorkbook.Sheets("CONCILIACION")
    On Error GoTo ErrHandler
    If wsDATA Is Nothing Or wsCONC Is Nothing Then
        MsgBox "No se encontraron las hojas (DATA / CONCILIACIÓN).", vbCritical
        GoTo TidyExit
    End If

    ' 1) Clean
    wsDATA.Cells.Clear
    wsCONC.Cells.Clear

    ' 2) Pick CSV/TXT
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Seleccionar archivo CSV / TXT"
        .Filters.Clear
        .Filters.Add "Text/CSV", "*.csv;*.txt"
        .AllowMultiSelect = False
        If .Show <> -1 Then GoTo TidyExit
        filePath = .SelectedItems(1)
    End With

    ' 3) Open with parser and bring everything
    Application.DisplayAlerts = False
    Workbooks.OpenText _
        Filename:=filePath, _
        DataType:=xlDelimited, _
        Comma:=True, Semicolon:=True, Tab:=True, _
        DecimalSeparator:=".", ThousandsSeparator:=",", _
        Local:=True
    Application.DisplayAlerts = True

    Set wbTemp = ActiveWorkbook
    Set wsTemp = wbTemp.Sheets(1)
    wsTemp.UsedRange.Copy Destination:=wsDATA.Range("A1")
    wbTemp.Close SaveChanges:=False
    wsDATA.Columns.AutoFit

    ' 4) Fix dates in F (keep first 10 chars -> parse -> real date) -> dd/mm/yyyy
    lastRow = wsDATA.Cells(wsDATA.Rows.Count, "F").End(xlUp).Row
    If lastRow >= 2 Then
        For i = 2 To lastRow
            s = CStr(wsDATA.Cells(i, "F").Value)

            s = Replace(s, Chr$(160), " ")
            s = Replace(s, "a. m.", "", , , vbTextCompare)
            s = Replace(s, "p. m.", "", , , vbTextCompare)
            s = Replace(s, "AM", "", , , vbTextCompare)
            s = Replace(s, "PM", "", , , vbTextCompare)
            s = Trim$(s)

            pos = InStr(s, " ")
            If pos > 0 Then token = Left$(s, pos - 1) Else token = s

            If Len(token) >= 10 Then t10 = Left$(token, 10) Else t10 = token
            t10 = Replace(Replace(t10, "-", "/"), ".", "/")

            ok = False
            If t10 Like "####/*/*" Then
                p = Split(t10, "/")
                If UBound(p) = 2 Then
                    y = Val(p(0)): m = Val(p(1)): dd = Val(p(2))
                    If y > 0 And m >= 1 And m <= 12 And dd >= 1 And dd <= 31 Then
                        d = DateSerial(y, m, dd): ok = True
                    End If
                End If
            ElseIf t10 Like "##/*/####" Or t10 Like "#/*/####" Then
                p = Split(t10, "/")
                If UBound(p) = 2 Then
                    dd = Val(p(0)): m = Val(p(1)): y = Val(p(2))
                    If y > 0 And m >= 1 And m <= 12 And dd >= 1 And dd <= 31 Then
                        d = DateSerial(y, m, dd): ok = True
                    End If
                End If
            ElseIf IsNumeric(wsDATA.Cells(i, "F").Value2) Then
                d = CDate(wsDATA.Cells(i, "F").Value2): ok = True
            ElseIf IsDate(t10) Then
                d = DateValue(t10): ok = True
            End If

            If ok Then
                wsDATA.Cells(i, "F").Value = d
            Else
                wsDATA.Cells(i, "F").Value = t10   ' fallback trimmed text
            End If
        Next i

        wsDATA.Range("F2:F" & lastRow).NumberFormat = "dd/mm/yyyy"
    End If

    ' 5) Translate column C (after headers)
    lastRow = wsDATA.Cells(wsDATA.Rows.Count, "C").End(xlUp).Row
    If lastRow >= 2 Then
        For i = 2 To lastRow
            Select Case UCase$(Trim$(CStr(wsDATA.Cells(i, "C").Value)))
                Case "VENTA":  wsDATA.Cells(i, "C").Value = "SELL"
                Case "COMPRA": wsDATA.Cells(i, "C").Value = "BUY"
            End Select
        Next i
    End If

    ' 6) Keep only today in F (delete others)
    lastRow = wsDATA.Cells(wsDATA.Rows.Count, "F").End(xlUp).Row
    If lastRow >= 2 Then
        For i = lastRow To 2 Step -1
            If IsDate(wsDATA.Cells(i, "F").Value) Then
                If DateValue(wsDATA.Cells(i, "F").Value) <> todayDate Then wsDATA.Rows(i).Delete
            Else
                wsDATA.Rows(i).Delete
            End If
        Next i
    End If

    ' 7) Map columns — copy WHOLE COLUMN (including headers) with formats preserved
    '    DATA D -> CONC A
    wsCONC.Columns("A").NumberFormat = wsDATA.Columns("D").NumberFormat
    wsDATA.Columns("D").Copy Destination:=wsCONC.Columns("A")

    '    DATA C -> CONC B
    wsCONC.Columns("B").NumberFormat = wsDATA.Columns("C").NumberFormat
    wsDATA.Columns("C").Copy Destination:=wsCONC.Columns("B")

    '    DATA J -> CONC D
    wsCONC.Columns("D").NumberFormat = wsDATA.Columns("J").NumberFormat
    wsDATA.Columns("J").Copy Destination:=wsCONC.Columns("D")

    '    DATA E -> CONC F
    wsCONC.Columns("F").NumberFormat = wsDATA.Columns("E").NumberFormat
    wsDATA.Columns("E").Copy Destination:=wsCONC.Columns("F")

    '    DATA F -> CONC G  (dates: preserve displayed format)
    wsCONC.Columns("G").NumberFormat = wsDATA.Columns("F").NumberFormat
    wsDATA.Columns("F").Copy Destination:=wsCONC.Columns("G")

    '    DATA G -> CONC H
    wsCONC.Columns("H").NumberFormat = wsDATA.Columns("G").NumberFormat
    wsDATA.Columns("G").Copy Destination:=wsCONC.Columns("H")

    Application.CutCopyMode = False
    wsCONC.Columns.AutoFit

    MsgBox "Importado, normalizado y copiado por columnas (con encabezados y formatos).", vbInformation
    GoTo TidyExit

ErrHandler:
    MsgBox "Error en INT_ImportCSV_ToDATA_All: " & Err.Description, vbCritical
TidyExit:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub