Option Explicit

Public Sub DEUTSCHE()
    Dim fd As FileDialog
    Dim filePath As String
    Dim wbSrc As Workbook
    Dim wsSrc As Worksheet
    Dim wsDATA As Worksheet, wsCONC As Worksheet
    Dim found As Range
    Dim lastRow As Long, lastCol As Long
    Dim gotData As Boolean
    Dim r As Long
    Dim valA As String, norm As String
    Dim initLast As Long, newRow As Long
    Dim lastRowBase As Long, lastRowConc As Long
    Dim shellObj As Object, saveRoot As String, savePath As String
    Dim fileName As String, fullSave As String
    Dim wbNew As Workbook
    Dim tok2 As String, d As Variant
    
    On Error Resume Next
    Set wsDATA = ThisWorkbook.Sheets("DATA")
    Set wsCONC = ThisWorkbook.Sheets("CONCILIACIÓN")
    If wsCONC Is Nothing Then Set wsCONC = ThisWorkbook.Sheets("CONCILIACION")
    On Error GoTo 0
    
    If wsDATA Is Nothing Or wsCONC Is Nothing Then
        MsgBox "No se encontraron las hojas (DATA / CONCILIACIÓN).", vbCritical
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    ' 1) Limpia las hojas
    wsDATA.Cells.Clear
    wsCONC.Cells.Clear
    
    ' 2) Selecciona el archivo de Excel
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Select an Excel file"
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xlsx;*.xlsm;*.xls;*.xlsb"
        .AllowMultiSelect = False
        If .Show <> -1 Then GoTo TidyExit
        filePath = .SelectedItems(1)
    End With
    
    ' 3) Abre y copia la primera hoja → DATA!A1
    Set wbSrc = Workbooks.Open(fileName:=filePath)
    If wbSrc Is Nothing Then
        MsgBox "No fue posible abrir el Excel", vbCritical
        GoTo TidyExit
    End If
    
    Set wsSrc = wbSrc.Worksheets(1)
    gotData = False
    
    Set found = wsSrc.Cells.Find(What:="*", LookIn:=xlFormulas, LookAt:=xlPart, _
                                 SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False)
    If Not found Is Nothing Then
        lastRow = found.Row
        Set found = wsSrc.Cells.Find(What:="*", LookIn:=xlFormulas, LookAt:=xlPart, _
                                     SearchOrder:=xlByColumns, SearchDirection:=xlPrevious, MatchCase:=False)
        lastCol = found.Column
        
        wsSrc.Range(wsSrc.Cells(1, 1), wsSrc.Cells(lastRow, lastCol)).Copy wsDATA.Range("A1")
        gotData = True
    End If
    
    wbSrc.Close SaveChanges:=False
    
    If Not gotData Then
        MsgBox "No se encontró datos", vbExclamation
        GoTo TidyExit
    End If
    
    ' 4) Elimina filas con Canceled/Cancelled en A
    lastRow = wsDATA.Cells(wsDATA.Rows.Count, "A").End(xlUp).Row
    For r = lastRow To 2 Step -1
        valA = CStr(wsDATA.Cells(r, "A").Value)
        norm = UCase$(Trim$(valA))
        norm = Replace(norm, "CANCELLED", "CANCELED")
        If norm = "CANCELED" Then wsDATA.Rows(r).Delete
    Next r
    
    ' 5) Manejo de SWAP en H → crear segunda pierna al final (y MARCARLA)
    '    Marcamos la fila agregada en Z = "SWAP2" para tratar su G distinto.
    initLast = LastRowReliable(wsDATA)  ' snapshot de filas originales
    If initLast >= 2 Then
        For r = 2 To initLast
            If UCase$(Trim$(NormalizeSpaces(CStr(wsDATA.Cells(r, "H").Value)))) = "SWAP" Then
                newRow = LastRowReliable(wsDATA) + 1
                
                ' Copiar campos base (incluye L para extraer la 2a fecha)
                wsDATA.Cells(newRow, "E").Value = wsDATA.Cells(r, "E").Value
                wsDATA.Cells(newRow, "I").Value = wsDATA.Cells(r, "I").Value
                wsDATA.Cells(newRow, "K").Value = wsDATA.Cells(r, "K").Value
                wsDATA.Cells(newRow, "O").Value = wsDATA.Cells(r, "O").Value
                wsDATA.Cells(newRow, "L").Value = wsDATA.Cells(r, "L").Value
                
                ' Sentido (fila original a partir de J)
                If Val(wsDATA.Cells(r, "J").Value) < 0 Then
                    wsDATA.Cells(r, "G").Value = "Sell"
                ElseIf Val(wsDATA.Cells(r, "J").Value) > 0 Then
                    wsDATA.Cells(r, "G").Value = "Buy"
                End If
                
                ' Sentido (nueva fila) a partir de X
                If Val(wsDATA.Cells(r, "X").Value) < 0 Then
                    wsDATA.Cells(newRow, "G").Value = "Sell"
                ElseIf Val(wsDATA.Cells(r, "X").Value) > 0 Then
                    wsDATA.Cells(newRow, "G").Value = "Buy"
                End If
                
                ' Montos para segunda pierna: D ← W, E ← X (F se calculará luego)
                wsDATA.Cells(newRow, "J").Value = wsDATA.Cells(r, "W").Value
                wsDATA.Cells(newRow, "N").Value = wsDATA.Cells(r, "X").Value
                wsDATA.Cells(newRow, "M").ClearContents
                
                ' Marca
                wsDATA.Cells(newRow, "Z").Value = "SWAP2"
            End If
        Next r
    End If
    
    ' 6) Map a CONCILIACIÓN (G normal desde DATA!E)
    lastRowBase = LastRowReliable(wsDATA)
    If lastRowBase >= 2 Then
        ' Encabezados
        wsCONC.Range("A1").Value = wsDATA.Range("I1").Value
        wsCONC.Range("B1").Value = wsDATA.Range("G1").Value
        wsCONC.Range("C1").Value = wsDATA.Range("K1").Value
        wsCONC.Range("D1").Value = wsDATA.Range("J1").Value
        wsCONC.Range("E1").Value = wsDATA.Range("N1").Value
        wsCONC.Range("F1").Value = wsDATA.Range("M1").Value
        wsCONC.Range("G1").Value = wsDATA.Range("E1").Value
        wsCONC.Range("H1").Value = wsDATA.Range("O1").Value
        
        ' Datos
        wsCONC.Range("A2").Resize(lastRowBase - 1).Value = wsDATA.Range("I2").Resize(lastRowBase - 1).Value
        wsCONC.Range("B2").Resize(lastRowBase - 1).Value = wsDATA.Range("G2").Resize(lastRowBase - 1).Value
        wsCONC.Range("C2").Resize(lastRowBase - 1).Value = wsDATA.Range("K2").Resize(lastRowBase - 1).Value
        wsCONC.Range("D2").Resize(lastRowBase - 1).Value = wsDATA.Range("J2").Resize(lastRowBase - 1).Value
        wsCONC.Range("E2").Resize(lastRowBase - 1).Value = wsDATA.Range("N2").Resize(lastRowBase - 1).Value
        wsCONC.Range("F2").Resize(lastRowBase - 1).Value = wsDATA.Range("M2").Resize(lastRowBase - 1).Value
        wsCONC.Range("G2").Resize(lastRowBase - 1).Value = wsDATA.Range("E2").Resize(lastRowBase - 1).Value
        wsCONC.Range("H2").Resize(lastRowBase - 1).Value = wsDATA.Range("O2").Resize(lastRowBase - 1).Value
        
        ' 6.1) SOLO para "SWAP2": sobreescribir G con la 2a fecha de L (texto primero)
        For r = 2 To lastRowBase
            If UCase$(Trim$(CStr(wsDATA.Cells(r, "Z").Value))) = "SWAP2" Then
                tok2 = SecondDateToken(CStr(wsDATA.Cells(r, "L").Value))
                If Len(tok2) > 0 Then wsCONC.Cells(r, "G").Value = tok2
            End If
        Next r
        
        ' 6.2) Convertir TODAS las celdas de G a fecha real y formatear corto (dd/mm/yyyy)
        For r = 2 To lastRowBase
            If Not IsEmpty(wsCONC.Cells(r, "G").Value) Then
                If IsDate(wsCONC.Cells(r, "G").Value) Then
                    wsCONC.Cells(r, "G").Value = DateValue(wsCONC.Cells(r, "G").Value)
                Else
                    d = TryParseDdMmmYyyy(CStr(wsCONC.Cells(r, "G").Value))
                    If IsDate(d) Then wsCONC.Cells(r, "G").Value = CDate(d)
                End If
            End If
        Next r
        wsCONC.Range("G2:G" & lastRowBase).NumberFormat = "dd/mm/yyyy"
    End If
    
    ' 7) D y E en absoluto (sin negativos)
    lastRowConc = wsCONC.Cells(wsCONC.Rows.Count, "A").End(xlUp).Row
    For r = 2 To lastRowConc
        If IsNumeric(wsCONC.Cells(r, "D").Value) Then wsCONC.Cells(r, "D").Value = Abs(wsCONC.Cells(r, "D").Value)
        If IsNumeric(wsCONC.Cells(r, "E").Value) Then wsCONC.Cells(r, "E").Value = Abs(wsCONC.Cells(r, "E").Value)
    Next r
    
    ' 8) F = Abs(E / D) si está vacío
    If lastRowBase >= 2 Then
        For r = 2 To lastRowBase
            If Trim(CStr(wsCONC.Cells(r, "F").Value)) = "" Then
                If IsNumeric(wsCONC.Cells(r, "E").Value) And IsNumeric(wsCONC.Cells(r, "D").Value) Then
                    If wsCONC.Cells(r, "D").Value <> 0 Then
                        wsCONC.Cells(r, "F").Value = Abs(wsCONC.Cells(r, "E").Value / wsCONC.Cells(r, "D").Value)
                    End If
                End If
            End If
        Next r
        wsCONC.Range("F2:F" & lastRowBase).NumberFormat = "0.000000"
    End If
    
    ' 9) (sin filtro por fecha aquí)
    
    ' 10) Guardar en INTERMEDIARIOS
    lastRowConc = wsCONC.Cells(wsCONC.Rows.Count, "A").End(xlUp).Row
    If lastRowConc < 2 Then
        MsgBox "No hay operaciones para exportar", vbExclamation
        GoTo TidyExit
    End If
    
    Set shellObj = CreateObject("WScript.Shell")
    saveRoot = shellObj.SpecialFolders("MyDocuments")
    savePath = saveRoot & "\VARIOS\INTERMEDIARIOS\"
    
    If Dir(savePath, vbDirectory) = "" Then
        MsgBox "La carpeta no existe: " & vbCrLf & savePath, vbCritical
        GoTo TidyExit
    End If
    
    fileName = "DEUTSCHE BANK AG_" & Format(Date, "yyyymmdd") & ".xlsx"
    fullSave = savePath & fileName
    
    wsCONC.Copy
    Set wbNew = ActiveWorkbook
    On Error Resume Next
    wbNew.Sheets(1).Name = "Hoja1"
    On Error GoTo 0
    
    Application.DisplayAlerts = False
    wbNew.SaveAs fileName:=fullSave, FileFormat:=xlOpenXMLWorkbook
    Application.DisplayAlerts = True
    wbNew.Close SaveChanges:=False
    
    MsgBox "Proceso terminado. Archivo guardado en: " & vbCrLf & fullSave, vbInformation
    
TidyExit:
    Application.CutCopyMode = False
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

' === Helpers ===

Private Function LastRowReliable(ws As Worksheet) As Long
    Dim lastCell As Range
    Set lastCell = ws.Cells.Find(What:="*", LookIn:=xlFormulas, LookAt:=xlPart, _
                                 SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False)
    If lastCell Is Nothing Then
        LastRowReliable = 1
    Else
        LastRowReliable = lastCell.Row
    End If
End Function

Private Function NormalizeSpaces(ByVal s As String) As String
    Dim t As String
    t = Replace$(s, Chr$(160), " ")
    t = Replace$(t, ChrW$(&H202F), " ")
    NormalizeSpaces = t
End Function

' Devuelve la **segunda** fecha "dd-Mmm-yyyy" como TEXTO dentro de la cadena L
Private Function SecondDateToken(ByVal s As String) As String
    Dim parts() As String, i As Long, countFound As Long
    Dim tok As String
    s = Trim$(NormalizeSpaces(s))
    If Len(s) = 0 Then Exit Function
    parts = Split(s, " ")
    For i = LBound(parts) To UBound(parts)
        tok = Trim$(parts(i))
        If LooksLikeDdMmmYyyy(tok) Then
            countFound = countFound + 1
            If countFound = 2 Then
                SecondDateToken = tok
                Exit Function
            End If
        End If
    Next i
End Function

' Parse dd-Mmm-yyyy a Date (robusto para "d-Mmm-yyyy")
Private Function TryParseDdMmmYyyy(ByVal tok As String) As Variant
    Dim a() As String, dd As Long, yy As Long, mm As Long, mon As String
    If InStr(1, tok, "-", vbTextCompare) = 0 Then Exit Function
    a = Split(tok, "-")
    If UBound(a) <> 2 Then Exit Function
    If Not IsNumeric(a(0)) Then Exit Function
    dd = CLng(a(0))
    mon = a(1)
    yy = Val(a(2))
    mm = MonthFromAbbrev(mon)
    If mm = 0 Then Exit Function
    On Error GoTo Fail
    TryParseDdMmmYyyy = DateSerial(yy, mm, dd)
    Exit Function
Fail:
End Function

Private Function LooksLikeDdMmmYyyy(ByVal tok As String) As Boolean
    Dim a() As String, dd As Long, yy As Long, mm As Long
    If InStr(1, tok, "-", vbTextCompare) = 0 Then Exit Function
    a = Split(tok, "-")
    If UBound(a) <> 2 Then Exit Function
    If Not IsNumeric(a(0)) Then Exit Function
    dd = CLng(a(0)): yy = Val(a(2))
    mm = MonthFromAbbrev(a(1))
    If dd >= 1 And dd <= 31 And mm >= 1 And mm <= 12 And yy >= 1900 And yy <= 2100 Then
        LooksLikeDdMmmYyyy = True
    End If
End Function

Private Function MonthFromAbbrev(ByVal mon As String) As Long
    Dim m As String
    m = UCase$(Left$(Trim$(mon), 3))
    Select Case m
        Case "JAN": MonthFromAbbrev = 1
        Case "FEB": MonthFromAbbrev = 2
        Case "MAR": MonthFromAbbrev = 3
        Case "APR": MonthFromAbbrev = 4
        Case "MAY": MonthFromAbbrev = 5
        Case "JUN": MonthFromAbbrev = 6
        Case "JUL": MonthFromAbbrev = 7
        Case "AUG": MonthFromAbbrev = 8
        Case "SEP": MonthFromAbbrev = 9
        Case "OCT": MonthFromAbbrev = 10
        Case "NOV": MonthFromAbbrev = 11
        Case "DEC": MonthFromAbbrev = 12
    End Select
End Function